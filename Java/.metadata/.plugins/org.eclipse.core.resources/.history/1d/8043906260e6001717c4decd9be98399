import javax.swing.JOptionPane;

public class Program3App {
	private static long startTime;
	private static long simulationTime;
	private static Arrival arrival = new Arrival(5000);
	private static Departure departure =  new Departure(4000);
	private static Runway runway;



	public static long getStartTime(){
		return startTime;
	}


	public static void startSimulation(long time) {
		startTime = System.currentTimeMillis();
		simulationTime = time * 1000;
		//TODO: Start each thread
		arrival.start();
		departure.start();
		runway =  new Runway(arrival,departure);
		runway.start();
		// Loop - run simulation for specified time
		while(System.currentTimeMillis() < startTime + simulationTime){
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		//TODO: stop the loop in each thread ¨C call the stopRunning method
		arrival.stopRunning();
		departure.stopRunning();
		runway.stopRunning();
		//TODO: interrupt each thread ¨C method from Thread class
		try {
			arrival.join();
			departure.join();
			runway.join();

			//TODO: wait for each thread to die ¨C method from Thread class
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		long simulationTime = Integer.parseInt(JOptionPane.showInputDialog("Enter Simulation Time: " ));
		//Create an instance of Program3
		Program3App p3 = new Program3App();	
		//Call the startSimulation method and pass the time to it
		startSimulation(simulationTime);
		//Loop while the Arrival or Departure threads are alive
		while(arrival.isAlive()||departure.isAlive()){
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		//Stop the Runway thread from running
		runway.stopRunning();

	}
}
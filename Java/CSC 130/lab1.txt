package CSC130.hansrajd.lab1;
/**
 * Title: CSC130hansrajd.lab1
 * Filename: Matrix.java
 * Date Written: February 10, 2017
 * Due Date: February 18, 2017
 * Description:
 * Implements a Matrix class using 2-dimensional M x N integer array.
 * It performs the following operations: 
 * Addition, Subtraction: 
 * - the matrices must have the same dimensions
 * Multiplication: 
 * - the number of columns in the 1st matrix must match the number of rows in the 2nd
 * Equality:
 * - determines if the matrices are identical
 * Transposition: 
 * - rotates a matrix so the rows become columns and the columns become rows
 * Scalar Multiplication:
 * - the entire matrix is multiplied by a scalar value
 *@author Derick Hansraj
 */

public class Matrix {
	
	private int[][] m;

	public Matrix(int[][] m) {
		int length = m[0].length;
		boolean valid = true;

		for(int r = 0; r < m.length && valid; r++) {
			if(m[r].length != length) {
				m = null;
				valid = false;
			}
		}
		if(valid) {
			this.m = new int[m.length][m[0].length];
			for(int r =0;r<m.length; r++)
				for(int c=0; c<m[r].length;c++)
					this.m[r][c] = m[r][c];
		}
	}
	
	public Matrix add(Matrix otherMatrix) {
		int[][] temp = new int[m.length][m[0].length];
		for(int i=0;i < m.length; i++){
			for(int j=0;j < m[i].length; j++){
				temp[i][j] = m[i][j] + otherMatrix.m[i][j];
			}
		}
		Matrix m2 = new Matrix(temp);
		return m2;

	}
	public Matrix subt(Matrix otherMatrix) {
		int[][] temp = new int[m.length][m[0].length];
		for(int i=0;i < m.length; i++){
			for(int j=0;j < m[i].length; j++){
				temp[i][j] = m[i][j] - otherMatrix.m[i][j];
			}
		}
		Matrix m2 = new Matrix(temp);
		return m2;


	}

	public Matrix mult(Matrix otherMatrix) {
		int[][] temp = new int[m.length][m[0].length];
		for(int i=0;i < m.length; i++){
			for(int j=0;j < m[i].length; j++){
				temp[i][j] = m[i][j] * otherMatrix.m[i][j];
			}
		}
		Matrix m2 = new Matrix(temp);
		return m2;


	}
	public Matrix scalarMult(int scalar) {
		int[][] temp = new int[m.length][m[0].length];
		for(int i=0;i < m.length; i++){
			for(int j=0;j < m[i].length; j++){
				temp[i][j] = m[i][j] * 2;
			}
		}
		Matrix m2 = new Matrix(temp);
		return m2;



	}
	public Matrix transpose() {
		return null;

	}
	public String toString() {
		for(int i=0;i < m.length; i++){
			for(int j=0;j < m[i].length; j++){
				System.out.print(m[i][j] + " ");
			}
			System.out.println();
		}
		return "";
	}

    // return n-by-n identity matrix I
    public static double[][] identity(int n) {
        double[][] a = new double[n][n];
        for (int i = 0; i < n; i++)
            a[i][i] = 1;
        return a;
    }

    // return x^T y
    public static double dot(double[] x, double[] y) {
        if (x.length != y.length) throw new RuntimeException("Illegal vector dimensions.");
        double sum = 0.0;
        for (int i = 0; i < x.length; i++)
            sum += x[i] * y[i];
        return sum;
    }

    // return B = A^T
    public static double[][] transpose(double[][] a) {
        int m = a.length;
        int n = a[0].length;
        double[][] b = new double[n][m];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                b[j][i] = a[i][j];
        return b;
    }

    // return c = a * b
    public static double[][] multiply(double[][] a, double[][] b) {
        int m1 = a.length;
        int n1 = a[0].length;
        int m2 = b.length;
        int n2 = b[0].length;
        if (n1 != m2) throw new RuntimeException("Illegal matrix dimensions.");
        double[][] c = new double[m1][n2];
        for (int i = 0; i < m1; i++)
            for (int j = 0; j < n2; j++)
                for (int k = 0; k < n1; k++)
                    c[i][j] += a[i][k] * b[k][j];
        return c;
    }

    // matrix-vector multiplication (y = A * x)
    public static double[] multiply(double[][] a, double[] x) {
        int m = a.length;
        int n = a[0].length;
        if (x.length != n) throw new RuntimeException("Illegal matrix dimensions.");
        double[] y = new double[m];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                y[i] += a[i][j] * x[j];
        return y;
    }


    // vector-matrix multiplication (y = x^T A)
    public static double[] multiply(double[] x, double[][] a) {
        int m = a.length;
        int n = a[0].length;
        if (x.length != m) throw new RuntimeException("Illegal matrix dimensions.");
        double[] y = new double[n];
        for (int j = 0; j < n; j++)
            for (int i = 0; i < m; i++)
                y[j] += a[i][j] * x[i];
        return y;
    }
}

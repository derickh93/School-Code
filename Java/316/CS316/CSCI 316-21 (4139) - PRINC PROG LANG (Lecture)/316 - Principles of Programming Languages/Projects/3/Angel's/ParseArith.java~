import java.io.*;

/**
 *
 * This program was written and tested with JDK 1.6.0.
 * <br>
 * <br>This class is a top-down, recursive-descent parser for the following
 * <br>syntactic categories:
 * <br>
 * <br>< E > → < term > { (+|-) < term > }
 * <br>< term > → < primary > { (*|/) < primary > }
 * <br>< primary > → < id > | < int > | < float > | "(" < E > ")"
 * <br>
 * <br>The definitions of < id >, < int >, < float > are given in the lexical analyzer 
 * <br>class file "lexArith.java". The following variables and functions 
 * <br>of the "lexArith" class are used:
 * <br>
 * <br>static String t 					//holds an extracted token
 * <br>static State state 				//the current state of the finite automaton
 * <br>static int getToken() 			//extracts the next token
 * <br>static void display(String s)	
 * <br>static void displayln(String s)	
 * <br>static void setLex(String inFile, String outFile)
 * <br>static void closeIO()
 * <br>
 * <br>The program will display the parse tree in linearly indented form.
 * <br>Each syntactic category name labeling a node is
 * <br>displayed on a separate line, prefixed with the integer i representing
 * <br>the node's depth and indented by i blanks. The arithmetic operators are
 * <br>displayed in the same way. The string variable "indent"
 * <br>will keep track of the correct number of blanks for indentation and
 * <br>will be passed to parsing functions corresponding to syntactic categories.
 */
public abstract class ParseArith extends LexAnalyzer
{
	/**
	 * < fun defs > → { < fun def > }<sup>+</sup>
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void funDefs(String indent)
	{
		display(indent+indent.length()+" fun defs");
		indent = indent+" ";
		
		funDef(indent);
	}//funDefs
	
	/**
	 * < fun def > → < header > < body >
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void funDef(String indent)
	{
		display(indent+indent.length()+" fun def");
		indent = indent+" ";
		
		header(indent);						//<header>
		getToken();
		body(indent);						//<body>
	}//funDef
	
	/**
	 * < header > → < fun name > "(" < parameter list > ")"
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void header(String indent)
	{
		display(indent+indent.length()+" header");
		indent = indent+" ";
		
		if(funName(indent))					//<fun name>
		{
			if(state==State.LParen)			//"("
			{
				getToken();
				parameterList(indent);		//<parameter list>
				if(state==State.RParen)		//")"
					getToken();
				else errorMsg(1);
			}//if
			else errorMsg(2);
		}//if
	}//header
	
	/**
	 * < fun name > → < id >
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static boolean funName(String indent)
	{
		display(indent+indent.length()+" fun name");
		indent = indent+" ";
		
		if(state==State.Id) return true;	//<id>
		return false;
	}//funName

	/**
	 * < parameter list > → ε | < id > {"," < id >}
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void parameterList(String indent)
	{
		display(indent+indent.length()+" parameter list");
		indent = indent+" ";
		
		if(state==State.Id)					//<id>
		{
			getToken();
			while(state==State.Comma)		//{","
			{
				getToken();					//<id>}
			}//while
		}//if
	}//parameterList
	
	/**
	 * < body > → "{" < Exp > "}"
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void body(String indent)
	{
		display(indent+indent.length()+" body");
		indent = indent+" ";
		
		if(state==State.LBrace)				//"{"
		{
			getToken();
			Exp(indent);					//<Exp>
			if(state==State.RBrace)			//"}"
				getToken();
			
			else errorMsg(1);
		}//if
		else errorMsg(2);
	}//body
	
	/**
	 * < Exp > → "if" "(" < expr > ")" < Exp > "else" < Exp > | < expr >
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void Exp(String indent)
	{
		display(indent+indent.length()+" Exp");
		indent = indent+" ";
		
		if(state==State.If)					//"if"
		{
			if(state==State.LParen)			//"("
			{
				getToken();
				expr(indent);				//<expr>
				if(state==State.RParen)		//")"
				{
					getToken();
					Exp(indent);			//<Exp>
					if(state==State.Else)	//"else"
					{
						getToken();
						Exp(indent);		//<Exp> |
					}//if
					else errorMsg(2);
				}//if
				else errorMsg(2);
			}//if
			else errorMsg(2);
		}//if
		else expr(indent);					//<expr>
	}//Exp
	
	/**
	 * < expr > → < bool term > { "||" < bool term > }
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void expr(String indent)
	{
		display(indent+indent.length()+" expr");
		indent = indent+" ";
		
		boolTerm(indent);				//<bool term>
		while(state==State.Or)			//{ "||"
		{
			//op=state;
			getToken();
			boolTerm(indent);			//<bool term>}
			//emitOperator(op);
		}//while
	}//expr
	
	/**
	 * < bool term > → < bool primary > { "&&" < bool primary > }
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void boolTerm(String indent)
	{
		display(indent+indent.length()+" bool term");
		indent = indent+" ";
		
		boolPrimary(indent);			//<bool primary>
		while(state==State.And)			//{ "&&"
		{
			//op=state;
			getToken();
			boolPrimary(indent);		//<bool primary>}
			//emitOperator(op);
		}//while
	}//boolTerm
	
	/**
	 * < bool primary > → < E > [ < rel op > < E > ]
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void boolPrimary(String indent)
	{
		display(indent+indent.length()+" bool primary");
		indent = indent+" ";
		
		E(indent);					//<E>
		if(relOp(indent)) 			//[<rel op>
			E(indent);				//<E>]
	}//boolPrimary
	
	/**
	 * < rel op > → "<" | "<=" | ">" | ">=" | "==" | "!="
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static boolean relOp(String indent)
	{
		display(indent+indent.length()+" rel op");
		indent = indent+" ";
		
		if (state==State.Lt)		//"<"  |
		{
			//op=state;
			getToken();
			//emitOperator(op);
			return true;
		}//if
		else if(state==State.Le)	//"<=" |
		{
			getToken();
			return true;
		}//else if
		else if(state==State.Gt)	//">"  |
		{
			getToken();
			return true;
		}//else if
		else if(state==State.Ge)	//">=" |
		{
			getToken();
			return true;
		}//else if
		else if(state==State.Eq)	//"==" |
		{
			getToken();
			return true;
		}//else if
		else if(state==State.Neq)	//"!=" |
		{
			getToken();
			return true;
		}//else if
		else
			return false;
	}//relOp
	
	/**
	 * < E > → < term > { (+|-) < term > }
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void E(String indent)
	{
		displayln(indent+indent.length()+" E");
		indent=indent+"	";

		term(indent);									//<term>
		while (state==State.Add||state==State.Sub )		//{(+|-)
		{
			displayln(indent+indent.length()+" "+t);
			getToken();
			term(indent);								//<term>}
		}
	}//E

	/**
	 * < term > → < primary > {(*|/) < primary > }
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void term(String indent)
	{
		displayln(indent+indent.length()+" term");
		indent = indent+" ";
		
		primary(indent);								//<primary>
		while (state==State.Mul||state==State.Div)		//{(*|/)
		{
			displayln(indent+indent.length()+" "+t);
			getToken();
			primary(indent);							//<primary>}
		}//while
	} // end term

	/**
	 * < primary > → < id > | < int > | < float > | "(" < E > ")"
	 * <br><t>change to:
	 * <br>< primary > → < id > | < int > | < float > | < float E > | < fun E > "(" < expr > ")" | - < primary > | ! < primary >
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void primary(String indent)
	{
		display(indent+indent.length()+" primary");
		indent = indent+" ";
														//<id> | <int> | <float> | <floatE> |
		if (state.compareTo(State.Id)>=0&&state.compareTo(State.FloatE)<=0)
		{
			displayln(" "+t); 
	     	getToken();
		}//if
		else if (state==State.LParen) 					//"("
		{
			displayln("");
			getToken();
			E(indent);									//<E>
			if (state==State.RParen)					//")"
				getToken();
			else errorMsg(1);
		}//else if
		else errorMsg(2);
	} // end primary
	
	/**
	 * < fun E > → < fun name > "(" < E list > ")"
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void funE(String indent)
	{
		display(indent+indent.length()+" fun E");
		indent = indent+" ";
		
		funName(indent);								//<fun name>
		if(state==State.LParen)							//"("
		{
			displayln("");
			getToken();
			eList(indent);								//<E list>
			if(state==State.RParen)						//")"
				getToken();
			else errorMsg(1);
		}//if
		else errorMsg(2);
	}//funName
	
	/**
	 * < E list > → ε | < expr > { "," < expr > }
	 * 
	 * @param indent - Used to properly indent displayed syntactic category names
	 */
	public static void eList(String indent)
	{
		display(indent+indent.length()+" E list");
		indent = indent+" ";
		
		expr(indent);								//<expr>
		while(state==State.Comma)					//{ ","
		{
			expr(indent);							//<expr>}
		}//while
	}//eList
//-----------------------------------------------------------------------------------------------
	/**
	 * Displays an appropriate error message
	 * 
	 * @param i <b>= 1</b> for "arith op or ) expected"
	 * <br><t> <b>i = 2</b> for "id, int, float, or < expected"
	 */
	public static void errorMsg(int i)
	{
		display(t + ": unexpected symbol where");

		if (i==1) displayln(" arith op or ) expected");
		else displayln(" id, int, float, or ( expected");
	}//errorMsg

	/**
	 * Runs the program
	 * 
	 * @param argv <b>[0] =</b> The input file name
	 * <br><t><b> argv [1] = </b> The output file name 
	 */
	public static void main(String argv[])
	{
		setLex( argv[0], argv[1] );
		
		/**Used to properly indent displayed syntactic category names*/
		String indent = "";
		
		getToken();
		E(indent);
		if (!t.isEmpty())
		{
			displayln(t + "  -- unexpected symbol");
		}//if
		closeIO();
	}//main
}//ParseArith